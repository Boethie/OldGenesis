package genesis.world.gen.layer;

import genesis.common.GenesisBiomes;
import genesis.world.biome.BiomeGenGenesisBase;
import net.minecraft.world.biome.BiomeGenBase;
import net.minecraft.world.gen.layer.GenLayer;
import net.minecraft.world.gen.layer.IntCache;

public class GenLayerBiomeEdgeGenesis extends GenLayer {
	public GenLayerBiomeEdgeGenesis(long p_i45475_1_, GenLayer p_i45475_3_) {
		super(p_i45475_1_);
		this.parent = p_i45475_3_;
	}

	/**
	 * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
	 * amounts, or biomeList[] indices based on the particular GenLayer subclass.
	 */
	public int[] getInts(int par1, int par2, int par3, int par4) {
		int[] aint = this.parent.getInts(par1 - 1, par2 - 1, par3 + 2, par4 + 2);
		int[] aint1 = IntCache.getIntCache(par3 * par4);
		for (int i1 = 0; i1 < par4; ++i1) {
			for (int j1 = 0; j1 < par3; ++j1) {
				this.initChunkSeed((long) (j1 + par1), (long) (i1 + par2));
				int k1 = aint[j1 + 1 + (i1 + 1) * (par3 + 2)];

				if(BiomeGenBase.getBiome(k1) instanceof BiomeGenGenesisBase) {
					BiomeGenGenesisBase biome = (BiomeGenGenesisBase) BiomeGenBase.getBiome(k1);

					if(biome.edgeVersion != null) {
						if (!this.replaceBiomeEdgeIfNecessary(aint, aint1, j1, i1, par3, k1, biome.biomeID, biome.edgeVersion.biomeID)) {
							int l1;
							int i2;
							int j2;
							int k2;

							aint1[j1 + i1 * par3] = k1;
						}
					}
				}


			}
		}

		return aint1;
	}

	private boolean replaceBiomeEdgeIfNecessary(int[] p_151636_1_, int[] p_151636_2_, int p_151636_3_, int p_151636_4_, int p_151636_5_, int p_151636_6_, int biomeID, int biomeEdgeID) {
		if (!biomesEqualOrMesaPlateau(p_151636_6_, biomeID)) {
			return false;
		} else {
			int k1 = p_151636_1_[p_151636_3_ + 1 + (p_151636_4_ + 1 - 1) * (p_151636_5_ + 2)];
			int l1 = p_151636_1_[p_151636_3_ + 1 + 1 + (p_151636_4_ + 1) * (p_151636_5_ + 2)];
			int i2 = p_151636_1_[p_151636_3_ + 1 - 1 + (p_151636_4_ + 1) * (p_151636_5_ + 2)];
			int j2 = p_151636_1_[p_151636_3_ + 1 + (p_151636_4_ + 1 + 1) * (p_151636_5_ + 2)];

			if (this.canBiomesBeNeighbors(k1, biomeID) && this.canBiomesBeNeighbors(l1, biomeID) && this.canBiomesBeNeighbors(i2, biomeID) && this.canBiomesBeNeighbors(j2, biomeID)) {
				p_151636_2_[p_151636_3_ + p_151636_4_ * p_151636_5_] = p_151636_6_;
			} else {
				p_151636_2_[p_151636_3_ + p_151636_4_ * p_151636_5_] = biomeEdgeID;
			}

			return true;
		}
	}

	private boolean replaceBiomeEdge(int[] p_151635_1_, int[] p_151635_2_, int p_151635_3_, int p_151635_4_, int p_151635_5_, int p_151635_6_, int biomeID, int p_151635_8_) {
		if (p_151635_6_ != biomeID) {
			return false;
		} else {
			int k1 = p_151635_1_[p_151635_3_ + 1 + (p_151635_4_ + 1 - 1) * (p_151635_5_ + 2)];
			int l1 = p_151635_1_[p_151635_3_ + 1 + 1 + (p_151635_4_ + 1) * (p_151635_5_ + 2)];
			int i2 = p_151635_1_[p_151635_3_ + 1 - 1 + (p_151635_4_ + 1) * (p_151635_5_ + 2)];
			int j2 = p_151635_1_[p_151635_3_ + 1 + (p_151635_4_ + 1 + 1) * (p_151635_5_ + 2)];

			if (biomesEqualOrMesaPlateau(k1, biomeID) && biomesEqualOrMesaPlateau(l1, biomeID) && biomesEqualOrMesaPlateau(i2, biomeID) && biomesEqualOrMesaPlateau(j2, biomeID)) {
				p_151635_2_[p_151635_3_ + p_151635_4_ * p_151635_5_] = p_151635_6_;
			} else {
				p_151635_2_[p_151635_3_ + p_151635_4_ * p_151635_5_] = p_151635_8_;
			}

			return true;
		}
	}

	private boolean canBiomesBeNeighbors(int firstBiomeID, int secondBiomeID) {
		if (biomesEqualOrMesaPlateau(firstBiomeID, secondBiomeID)) {
			return true;
		} else if (BiomeGenBase.getBiome(firstBiomeID) != null && BiomeGenBase.getBiome(secondBiomeID) != null) {
			BiomeGenBase.TempCategory tempcategory = BiomeGenBase.getBiome(firstBiomeID).getTempCategory();
			BiomeGenBase.TempCategory tempcategory1 = BiomeGenBase.getBiome(secondBiomeID).getTempCategory();
			return tempcategory == tempcategory1 || tempcategory == BiomeGenBase.TempCategory.MEDIUM || tempcategory1 == BiomeGenBase.TempCategory.MEDIUM;
		} else {
			return false;
		}
	}
}