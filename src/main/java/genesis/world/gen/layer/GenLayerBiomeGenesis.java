package genesis.world.gen.layer;

import static net.minecraftforge.common.BiomeManager.BiomeType.COOL;
import static net.minecraftforge.common.BiomeManager.BiomeType.DESERT;
import static net.minecraftforge.common.BiomeManager.BiomeType.ICY;
import static net.minecraftforge.common.BiomeManager.BiomeType.WARM;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import scala.actors.threadpool.Arrays;
import genesis.common.GenesisBiomes;
import net.minecraft.util.WeightedRandom;
import net.minecraft.world.WorldType;
import net.minecraft.world.biome.BiomeGenBase;
import net.minecraft.world.gen.layer.GenLayer;
import net.minecraft.world.gen.layer.IntCache;
import net.minecraftforge.common.BiomeManager;
import net.minecraftforge.common.BiomeManager.BiomeEntry;

public class GenLayerBiomeGenesis extends GenLayer {    
	private HashMap<BiomeManager.BiomeType, List<BiomeEntry>> biomes = new HashMap<BiomeManager.BiomeType, List<BiomeEntry>>();

	GenLayerBiomeGenesis(long seed, GenLayer parentLayer) {
		this(seed, parentLayer, "");
	}

	public GenLayerBiomeGenesis(long par1, GenLayer par3GenLayer, String chunkProviderSettingsJson) {
		super(par1);
		this.parent = par3GenLayer;

		//Add the weighted biomes to generate to a list.

		ArrayList<BiomeEntry> biomeList;


		//Add Hot biomes
		biomeList = new ArrayList<BiomeEntry>();
		biomeList.add(new BiomeEntry(GenesisBiomes.rainforest, 20));
		biomeList.add(new BiomeEntry(GenesisBiomes.rainforestSwamp, 20));
		biomeList.add(new BiomeEntry(GenesisBiomes.araucarioxylonForest, 20));


		biomes.put(DESERT, biomeList);


		//Add Warm biomes
		biomeList = new ArrayList<BiomeEntry>();

		biomes.put(WARM, biomeList);


		//Add Cool biomes
		biomeList = new ArrayList<BiomeEntry>();

		//TODO: Add cool biomes here.

		biomes.put(COOL, biomeList);


		//Add Cold biomes
		biomeList = new ArrayList<BiomeEntry>();

		//TODO: Add cold biomes here.

		biomes.put(ICY, biomeList);
	}

	/**
	 * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
	 * amounts, or biomeList[] indices based on the particular GenLayer subclass.
	 */
	public int[] getInts(int areaX, int areaY, int areaWidth, int areaHeight) {
		int[] aint = this.parent.getInts(areaX, areaY, areaWidth, areaHeight);
		int[] aint1 = IntCache.getIntCache(areaWidth * areaHeight);

		for (int i1 = 0; i1 < areaHeight; ++i1)
		{
			for (int j1 = 0; j1 < areaWidth; ++j1)
			{
				this.initChunkSeed((long)(j1 + areaX), (long)(i1 + areaY));
				int position = j1 + i1 * areaWidth;
				int k1 = aint[position];
				int l1 = (k1 & 3840) >> 8;
			k1 &= -3841;

			if (isBiomeOceanic(k1))
			{
				aint1[position] = GenesisBiomes.oceanId;
			}
			else if (k1 == 1 && !biomes.get(DESERT).isEmpty())
			{
				aint1[position] = getWeightedBiomeEntry(DESERT).biome.biomeID;
			}
			else if (k1 == 2 && !biomes.get(WARM).isEmpty())
			{
				aint1[position] = getWeightedBiomeEntry(WARM).biome.biomeID;
			}
			else if (k1 == 3 && !biomes.get(COOL).isEmpty())
			{
				aint1[position] = getWeightedBiomeEntry(COOL).biome.biomeID;
			}
			else if (k1 == 4 && !biomes.get(ICY).isEmpty())
			{
				aint1[position] = getWeightedBiomeEntry(ICY).biome.biomeID;
			}
			else
			{
				aint1[position] = GenesisBiomes.rainforestId;
			}
			}
		}

		return aint1;
	}

	protected BiomeEntry getWeightedBiomeEntry(BiomeManager.BiomeType type)
	{
		List<BiomeEntry> biomeList = biomes.get(type);
		int totalWeight = WeightedRandom.getTotalWeight(biomeList);
		int weight = BiomeManager.isTypeListModded(type)?nextInt(totalWeight):nextInt(totalWeight / 10) * 10;
		return (BiomeEntry)WeightedRandom.getRandomItem(biomeList, weight);
	}
}